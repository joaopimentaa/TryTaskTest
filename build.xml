<?xml version="1.0" encoding="UTF-8"?>
<project name="TryTasks" default="test" basedir=".">
    <!-- ==================================================
         PROPRIEDADES GERAIS
         --------------------------------------------------
         src.dir           → aqui fica TODO o código-fonte (.java).
                             No GitHub, as .java estão diretamente em src/.
         build.classes.dir → saída das classes compiladas (produção e testes juntos)
         lib.dir           → diretório de bibliotecas (JARs: driver Postgres + JUnit)
         dist.dir          → diretório de distribuição (JAR final do app)
         ================================================== -->
    <property name="src.dir"           location="src"/>
    <property name="build.classes.dir" location="build/classes"/>
    <property name="lib.dir"           location="lib"/>
    <property name="dist.dir"          location="dist"/>

    <!-- ==================================================
         CONFIGURAÇÃO DE CLASSPATH:
         Inclui TODOS os JARs dentro de lib/ no classpath
         ( driver-postgres + junit-platform-console-standalone )
         ================================================== -->
    <path id="project.class.path">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- ==================================================
         TARGET “init” → Cria pastas de saída (se ainda não existirem)
         ================================================== -->
    <target name="init">
        <mkdir dir="${build.classes.dir}"/>
        <mkdir dir="${dist.dir}"/>
    </target>

    <!-- ==================================================
         TARGET “compile” → Compila TODO o código encontrado em src/
         --------------------------------------------------
         - Fonte:             src/
         - Destino:           build/classes
         - Classpath:         lib/**/*.jar (driver + JUnit)
         ================================================== -->
    <target name="compile" depends="init">
        <echo message="Compilando todo o código encontrado em src/ ..."/>
        <javac srcdir="${src.dir}"
               destdir="${build.classes.dir}"
               includeantruntime="false"
               classpathref="project.class.path"
               source="11" target="11"/>
    </target>

    <!-- ==================================================
         TARGET “test” → Executa testes JUnit 5 via Console Standalone
         --------------------------------------------------
         Pré-requisitos (em lib/):
           • postgresql-42.7.3.jar
           • junit-platform-console-standalone-1.9.2.jar
         Como funciona:
           1) Depende de compile (já compilou tudo em build/classes)
           2) Roda “java -jar junit-platform-console-standalone-1.9.2.jar”
              apontando para (build/classes + lib/*.jar) no classpath
           3) O console JUnit busca todas as classes cujo nome termine em *Test
         ================================================== -->
    <target name="test" depends="compile">
        <echo message="Executando testes JUnit 5 (Console Standalone) ..."/>

        <!-- Monta a string de classpath: build/classes + todos os JARs de lib/ -->
        <path id="runtime.test.classpath">
            <pathelement location="${build.classes.dir}"/>
            <path refid="project.class.path"/>
        </path>

        <!-- Chama o JUnit Platform Console Standalone -->
        <java jar="${lib.dir}/junit-platform-console-standalone-1.9.2.jar"
              fork="true"
              failonerror="true">
            <arg line="--class-path ${toString:runtime.test.classpath} --scan-class-path"/>
        </java>
    </target>

    <!-- ==================================================
         TARGET “jar” → Empacota o JAR final do aplicativo (opcional)
         --------------------------------------------------
         - Inclui todas as classes compiladas (build/classes)
         - Adiciona “Main-Class” no manifesto (ajuste se for outro pacote)
         - Saída: dist/TryTasks.jar
         ================================================== -->
    <target name="jar" depends="compile">
        <echo message="Gerando JAR de distribuição em dist/TryTasks.jar ..."/>
        <jar destfile="${dist.dir}/TryTasks.jar" basedir="${build.classes.dir}">
            <manifest>
                <!-- Ajuste esta classe principal se for diferente -->
                <attribute name="Main-Class" value="com.example.trytasks.TryTasks"/>
            </manifest>
        </jar>
    </target>

    <!-- ==================================================
         TARGET “clean” → Limpa diretórios de build e distribuição
         ================================================== -->
    <target name="clean">
        <delete dir="${build.classes.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>
</project>
