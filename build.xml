<?xml version="1.0" encoding="UTF-8"?>
<project name="TryTasks" default="test" basedir=".">
    <!-- ==================================================
         PROPRIEDADES GERAIS

         src.dir           → código-fonte principal (Java)
         test.src.dir      → código-fonte de testes
         build.classes.dir → saída das classes compiladas (produção)
         build.test.dir    → saída das classes compiladas (testes)
         lib.dir           → diretório de bibliotecas (JARs)
         dist.dir          → diretório de distribuição (JAR final)
         ================================================== -->
    <property name="src.dir"           location="src/main/java"/>
    <property name="test.src.dir"      location="src/test/java"/>
    <property name="build.classes.dir" location="build/classes"/>
    <property name="build.test.dir"    location="build/test-classes"/>
    <property name="lib.dir"           location="lib"/>
    <property name="dist.dir"          location="dist"/>

    <!-- ==================================================
         CONFIGURAÇÃO DE CLASSPATH:
         Inclui TODOS os JARs dentro de lib/ no classpath
         ================================================== -->
    <path id="project.class.path">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- ==================================================
         TARGET “init” → Cria pastas de saída (caso não existam)
         ================================================== -->
    <target name="init">
        <mkdir dir="${build.classes.dir}"/>
        <mkdir dir="${build.test.dir}"/>
        <mkdir dir="${dist.dir}"/>
    </target>

    <!-- ==================================================
         TARGET “compile” → Compila o código principal

         - Fonte: src/main/java
         - Destino: build/classes
         - Classpath: lib/*.jar (inclui driver Postgres e JUnit, caso estejam em lib/)
         ================================================== -->
    <target name="compile" depends="init">
        <javac srcdir="${src.dir}"
               destdir="${build.classes.dir}"
               includeantruntime="false"
               classpathref="project.class.path"
               source="11" target="11"/>
    </target>

    <!-- ==================================================
         TARGET “compile-tests” → Compila o código de testes

         - Fonte: src/test/java
         - Destino: build/test-classes
         - Classpath: build/classes + lib/*.jar
         ================================================== -->
    <target name="compile-tests" depends="compile">
        <javac srcdir="${test.src.dir}"
               destdir="${build.test.dir}"
               includeantruntime="false">
            <classpath>
                <!-- inclui as classes já compiladas do projeto -->
                <pathelement location="${build.classes.dir}"/>
                <!-- inclui todos os JARs de lib/ (driver e JUnit) -->
                <path refid="project.class.path"/>
            </classpath>
            <compilerarg line="--release 11"/>
        </javac>
    </target>

    <!-- ==================================================
         TARGET “test” → Executa os testes JUnit 5 (via Console Standalone)

         Pré-requisitos:
          1) Você já possui o JAR “postgresql-42.7.3.jar” em lib/.
          2) Tenha em lib/ também o JAR “junit-platform-console-standalone-1.9.2.jar”.
         Como funciona:
          - O Ant chama o JUnit Platform Console, apontando para:
             • classes “build/classes”
             • classes de teste “build/test-classes”
             • TODOS os JARs de lib/ no classpath
         ================================================== -->
    <target name="test" depends="compile-tests">
        <echo message="Executando testes JUnit 5 via Console Standalone..."/>

        <!-- Monta a string de classpath: build/classes:build/test-classes:lib/* -->
        <path id="runtime.test.classpath">
            <pathelement location="${build.classes.dir}"/>
            <pathelement location="${build.test.dir}"/>
            <path refid="project.class.path"/>
        </path>

        <!-- Executa o JUnit Platform Console Standalone -->
        <java jar="${lib.dir}/junit-platform-console-standalone-1.9.2.jar"
              fork="true"
              failonerror="true">
            <arg line="--class-path ${toString:runtime.test.classpath} --scan-class-path"/>
        </java>
    </target>

    <!-- ==================================================
         TARGET “jar” → Empacota o JAR final do aplicativo

         - Inclui todas as classes compiladas (build/classes)
         - Adiciona “Main-Class” no manifesto
         - Saída: dist/TryTasks.jar
         ================================================== -->
    <target name="jar" depends="compile">
        <echo message="Gerando JAR de distribuição..."/>
        <jar destfile="${dist.dir}/TryTasks.jar"
             basedir="${build.classes.dir}">
            <manifest>
                <!-- Ajuste para a sua classe principal, se diferente -->
                <attribute name="Main-Class" value="com.example.trytasks.TryTasks"/>
            </manifest>
        </jar>
    </target>

    <!-- ==================================================
         TARGET “clean” → Limpa todos os diretórios de build e distribuição
         ================================================== -->
    <target name="clean">
        <delete dir="${build.classes.dir}"/>
        <delete dir="${build.test.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>
</project>
